// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Initial Mux16 choosing between ALUout and the instruction (guess for c: instruction[15]?)
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Mux1out);
    // A register (guess for c: instruction[5]?)
    // Address appears to be out[0..14] because the first bit would specify an address command
    Not(in=instruction[15], out=noti);
    Or(a=instruction[5], b=noti, out=aload);
    ARegister(in=Mux1out, load=aload, out=aregout, out[0..14]=addressM);
    // D register (guess for c: instruction[4]?)
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=ALUout, load=dload, out=dregout);
    // Mux2 chooses between in from memory or the A register output
    Mux16(a=aregout, b=inM, sel=instruction[12], out=Mux2out);
    // Now for the ALU
    // control bits start 1+3 from the right so it starts at 11 (which would be the zx)
    ALU(x=dregout, y=Mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
    //writeM if it's an A command you can't write
    And(a=instruction[15], b=instruction[3], out=writeM);
    // Jump control
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notzr, b=notng, out=notzrng);
    Or(a=zr, b=ng, out=zrng);
    Mux8Way16(a=false, b[0..14]=false, b[15]=notzrng, c[0..14]=false, c[15]=zr, d[0..14]=false, d[15]=notng, e[0..14]=false, e[15]=ng, f[0..14]=false, f[15]=notzr, g[0..14]=false, g[15]=zrng, h[0..14]=false, h[15]=true, sel=instruction[0..2], out=jumpout, out[15]=jumpcon);
    // Program Counter (intputs are the A register output, reset, a control (load), out to pc)
    // Load is some jumping control
    // PC is also an address so ill let it go out[0..14]
    And(a=instruction[15], b=jumpcon, out=jcon);
    PC(in=aregout, reset=reset, inc=true, load=jcon, out[0..14]=pc); 
}
